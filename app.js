//заходим в папку с проектом открываем терминал и прописываем git init 
// создает локаьный репозиторий 

// git status проверяет текущее состояние репозитория

// git add index.html  
// git add style.css
// git add app.js   для добавления файа в отслеживаемые 

// Можно добавить в отслеживаемые сразу много файлов. Тогда нужно воспользоваться
// сокращением и написать git add -A.

// git status проверяет текущее состояние репозитория зеленые значит добавил 

//git commit  Процедура, при которой делается снимок файла (папки) в данном состоянии
// Выполните команду git commit -m "add app". 
// В кавычках принято писать о том, что изменилось в проекте с последнего снимка.

//Выполните команду git status, чтобы убедиться, что все файлы попали
// в снимок проекта

// Добавьте файл в индекс и подпишите коммит, выполнив последовательно 2 команды
// git add app.js и git commit -m "change app"

// Просмотр истории проекта
// 1 Выполните команду git log --oneline
// f41b307 (HEAD -> master) change app      --последний коммит
// 38110df app.js                           --предыдущий коммит
// HEAD указатель на коммит где сейчас находимся
// change --сообщение вв ковычках для комита
// 38110df хеш или id коммита


// Чтобы посмотреть всю информацию о коммите, выполните команду git log без флага --
// Если история очень длинная, то Git может перейти в режим вывода данных и не давать вводить
// новые команды. В этом случае нажмите Q — режим вывода закроется и вы сможете
// продолжить работу



// Резюме
// Смотреть историю можно командой git log с разными флагами --
// oneline или --all
// Исправить что-то в последнем коммите, который хранится
// только на компьютере, можно при помощи флага --amend
// Чтобы не добавлять в коммит все файлы
// по именам можно, написать флаг -A
// Переключиться между коммитами проекта
// можно командой git checkout хеш.
// Вернуться к последнему коммиту можно командой git checkout -


//Проверьте, что к папке test ещё не привязан никакой удалённый репозиторий. Для этого
// выполните команду git remote -v. Git ничего не ответит, потому что список связей пуст


//Создайте связь между локальным и удалёнными репозиториями. Выполните команду
// git remote add origin ссылка на папку удалённого репозитория
// git remote add origin git@github.com:Naytler/sait.git


// Проверьте наличие связей у папки test ещё раз. 
// Выполните команду git remote -v. На этот раз
// Git ответит, что есть связь origin и она указывает на репозиторий на GitHub, 
// который создан


// Если нам когда-нибудь потребуется удалить связь, то можно использовать команду
// git remote remove origin или какое-то другое название связи,
// которая больше не нужна после список будет пуст.


// Чтобы отправить что-то в удалённый репозиторий, нужно воспользоваться командой
// git push -u origin main. Обратите внимание,
//  что мы указываем, по какому пути отправлять
// проект — прописываем имя связи origin
